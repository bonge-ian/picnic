$webkit: true !default;
$moz: true !default;
$ms: false !default;
$o: false !default;

// Durations
$fastDuration: .1s !default;
$mediumDuration: .3s !default;
$slowDuration: .5s !default;

// prefix declarations
@mixin prefixed($property, $value) {
	@if $webkit ==true {
		-webkit-#{$property}: #{$value};
	}

	@if $moz ==true {
		-moz-#{$property}: #{$value};
	}

	@if $ms ==true {
		-ms-#{$property}: #{$value};
	}

	@if $o ==true {
		-o-#{$property}: #{$value};
	}

	#{$property}: #{$value};
}

// prefix keyframes
@mixin keyframes($name) {
	@if $webkit ==true {
		@-webkit-keyframes #{$name} {
			@content;
		}
	}

	@if $moz ==true {
		@-moz-keyframes #{$name} {
			@content;
		}
	}
}
// As is often the case, some devices/browsers need additional code to get CSS to work
// in the most desired way. These mixins are used to quickly drop in hacks for each element
// Find out more here: https://github.com/IanLunn/Hover/wiki/Hacks-Explained

@mixin hardwareAccel() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	@include prefixed(transform, perspective(1px) translateZ(0));
}

@mixin improveAntiAlias() {
	// Improve aliasing on mobile/tablet devices
	box-shadow: 0 0 1px rgba(0, 0, 0, 0);
}

@mixin forceBlockLevel() {
	// Transforms need to be block-level to work
	display: inline-block;
	vertical-align: middle;
}

@mixin hacks() {
	@include forceBlockLevel();
	@include hardwareAccel();
	@include improveAntiAlias();
}

/* Shutter Out Horizontal */
@mixin shutter-out-horizontal($backgroundColor, $activeColor) {
	@include hacks();
	position: relative;
	background: $backgroundColor;
	@include prefixed(transition-property, color);
	@include prefixed(transition-duration, $mediumDuration);

	&::before {
		content: "";
		position: absolute;
		z-index: -1;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		background: $activeColor;
		@include prefixed(transform, scaleX(0));
		@include prefixed(transform-origin, 50%);
		@include prefixed(transition-property, transform);
		@include prefixed(transition-duration, $mediumDuration);
		@include prefixed(transition-timing-function, ease-out);
	}

	&:hover,
	&:focus,
	&:active {
		color: white;

		&::before {
			@include prefixed(transform, scaleX(1));
		}
	}
}

/* Underline From Center */
@mixin underline-from-center($activeColor, $hacks:false) {
	$duration: $mediumDuration;

	@if $hacks == true {
		@include hacks();
	}

	position: relative;
	overflow: hidden;

	&:before {
		content: "";
		position: absolute;
		z-index: -1;
		left: 51%;
		right: 51%;
		bottom: 0;
		background: $activeColor;
		height: 4px;
		@include prefixed(transition-property, "left, right");
		@include prefixed(transition-duration, $duration);
		@include prefixed(transition-timing-function, ease-out);
	}

	&:hover,
	&:focus,
	&:active {

		&:before {
			left: 0;
			right: 0;
		}
	}
}
